package com.example.entity;
// Generated Dec 19, 2015 11:20:12 PM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * AdminUser generated by hbm2java
 */
@Entity
@Table(name = "admin_user", catalog = "lovefashion", uniqueConstraints = @UniqueConstraint(columnNames = "username") )
public class AdminUser implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer userId;
	private String firstname;
	private String lastname;
	private String email;
	private String username;
	private String password;
	private Date created;
	private Date logdate;
	private short lognum;
	private short isActive;
	private Set<AdminRole> adminRoles = new HashSet<AdminRole>(0);
	private Set<VerificationToken> verificationTokens = new HashSet<VerificationToken>(0);

	public AdminUser() {
	}

	public AdminUser(Date created, short lognum, short isActive) {
		this.created = created;
		this.lognum = lognum;
		this.isActive = isActive;
	}

	public AdminUser(String firstname, String lastname, String email, String username, String password, Date created,
			Date logdate, short lognum, short isActive, Set<AdminRole> adminRoles,
			Set<VerificationToken> verificationTokens) {
		this.firstname = firstname;
		this.lastname = lastname;
		this.email = email;
		this.username = username;
		this.password = password;
		this.created = created;
		this.logdate = logdate;
		this.lognum = lognum;
		this.isActive = isActive;
		this.adminRoles = adminRoles;
		this.verificationTokens = verificationTokens;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "firstname", length = 32)
	public String getFirstname() {
		return this.firstname;
	}

	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	@Column(name = "lastname", length = 32)
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	@Column(name = "email", length = 128)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "username", unique = true, length = 40)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "logdate", length = 19)
	public Date getLogdate() {
		return this.logdate;
	}

	public void setLogdate(Date logdate) {
		this.logdate = logdate;
	}

	@Column(name = "lognum", nullable = false)
	public short getLognum() {
		return this.lognum;
	}

	public void setLognum(short lognum) {
		this.lognum = lognum;
	}

	@Column(name = "is_active", nullable = false)
	public short getIsActive() {
		return this.isActive;
	}

	public void setIsActive(short isActive) {
		this.isActive = isActive;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "adminUser")
	public Set<AdminRole> getAdminRoles() {
		return this.adminRoles;
	}

	public void setAdminRoles(Set<AdminRole> adminRoles) {
		this.adminRoles = adminRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "adminUser")
	public Set<VerificationToken> getVerificationTokens() {
		return this.verificationTokens;
	}

	public void setVerificationTokens(Set<VerificationToken> verificationTokens) {
		this.verificationTokens = verificationTokens;
	}

}
